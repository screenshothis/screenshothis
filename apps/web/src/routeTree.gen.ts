/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MarketingImport } from './routes/_marketing'
import { Route as AuthImport } from './routes/_auth'
import { Route as AppImport } from './routes/_app'
import { Route as MarketingIndexImport } from './routes/_marketing/index'
import { Route as AuthRegisterImport } from './routes/_auth/register'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as AuthForgotPasswordImport } from './routes/_auth/forgot-password'
import { Route as AppScreenshotsImport } from './routes/_app/screenshots'
import { Route as AppPlaygroundImport } from './routes/_app/playground'
import { Route as AppDashboardImport } from './routes/_app/dashboard'

// Create/Update Routes

const MarketingRoute = MarketingImport.update({
  id: '/_marketing',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const MarketingIndexRoute = MarketingIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MarketingRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRoute,
} as any)

const AppScreenshotsRoute = AppScreenshotsImport.update({
  id: '/screenshots',
  path: '/screenshots',
  getParentRoute: () => AppRoute,
} as any)

const AppPlaygroundRoute = AppPlaygroundImport.update({
  id: '/playground',
  path: '/playground',
  getParentRoute: () => AppRoute,
} as any)

const AppDashboardRoute = AppDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_marketing': {
      id: '/_marketing'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MarketingImport
      parentRoute: typeof rootRoute
    }
    '/_app/dashboard': {
      id: '/_app/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppDashboardImport
      parentRoute: typeof AppImport
    }
    '/_app/playground': {
      id: '/_app/playground'
      path: '/playground'
      fullPath: '/playground'
      preLoaderRoute: typeof AppPlaygroundImport
      parentRoute: typeof AppImport
    }
    '/_app/screenshots': {
      id: '/_app/screenshots'
      path: '/screenshots'
      fullPath: '/screenshots'
      preLoaderRoute: typeof AppScreenshotsImport
      parentRoute: typeof AppImport
    }
    '/_auth/forgot-password': {
      id: '/_auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof AuthImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof AuthImport
    }
    '/_marketing/': {
      id: '/_marketing/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MarketingIndexImport
      parentRoute: typeof MarketingImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppDashboardRoute: typeof AppDashboardRoute
  AppPlaygroundRoute: typeof AppPlaygroundRoute
  AppScreenshotsRoute: typeof AppScreenshotsRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppDashboardRoute: AppDashboardRoute,
  AppPlaygroundRoute: AppPlaygroundRoute,
  AppScreenshotsRoute: AppScreenshotsRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface AuthRouteChildren {
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface MarketingRouteChildren {
  MarketingIndexRoute: typeof MarketingIndexRoute
}

const MarketingRouteChildren: MarketingRouteChildren = {
  MarketingIndexRoute: MarketingIndexRoute,
}

const MarketingRouteWithChildren = MarketingRoute._addFileChildren(
  MarketingRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof MarketingRouteWithChildren
  '/dashboard': typeof AppDashboardRoute
  '/playground': typeof AppPlaygroundRoute
  '/screenshots': typeof AppScreenshotsRoute
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/': typeof MarketingIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteWithChildren
  '/dashboard': typeof AppDashboardRoute
  '/playground': typeof AppPlaygroundRoute
  '/screenshots': typeof AppScreenshotsRoute
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/': typeof MarketingIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRouteWithChildren
  '/_auth': typeof AuthRouteWithChildren
  '/_marketing': typeof MarketingRouteWithChildren
  '/_app/dashboard': typeof AppDashboardRoute
  '/_app/playground': typeof AppPlaygroundRoute
  '/_app/screenshots': typeof AppScreenshotsRoute
  '/_auth/forgot-password': typeof AuthForgotPasswordRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_marketing/': typeof MarketingIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/dashboard'
    | '/playground'
    | '/screenshots'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/dashboard'
    | '/playground'
    | '/screenshots'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/'
  id:
    | '__root__'
    | '/_app'
    | '/_auth'
    | '/_marketing'
    | '/_app/dashboard'
    | '/_app/playground'
    | '/_app/screenshots'
    | '/_auth/forgot-password'
    | '/_auth/login'
    | '/_auth/register'
    | '/_marketing/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
  MarketingRoute: typeof MarketingRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
  MarketingRoute: MarketingRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/_auth",
        "/_marketing"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/dashboard",
        "/_app/playground",
        "/_app/screenshots"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/forgot-password",
        "/_auth/login",
        "/_auth/register"
      ]
    },
    "/_marketing": {
      "filePath": "_marketing.tsx",
      "children": [
        "/_marketing/"
      ]
    },
    "/_app/dashboard": {
      "filePath": "_app/dashboard.tsx",
      "parent": "/_app"
    },
    "/_app/playground": {
      "filePath": "_app/playground.tsx",
      "parent": "/_app"
    },
    "/_app/screenshots": {
      "filePath": "_app/screenshots.tsx",
      "parent": "/_app"
    },
    "/_auth/forgot-password": {
      "filePath": "_auth/forgot-password.tsx",
      "parent": "/_auth"
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/register": {
      "filePath": "_auth/register.tsx",
      "parent": "/_auth"
    },
    "/_marketing/": {
      "filePath": "_marketing/index.tsx",
      "parent": "/_marketing"
    }
  }
}
ROUTE_MANIFEST_END */
